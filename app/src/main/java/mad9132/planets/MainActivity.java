package mad9132.planets;

import android.app.Activity;
import android.app.LoaderManager;
import android.content.AsyncTaskLoader;
import android.content.Context;
import android.content.Loader;
import android.os.Bundle;
import android.view.View;
import android.widget.TextView;

/**
 * Manage requests with class AsyncTaskLoader.
 *
 * @author Gerald.Hurdle@AlgonquinCollege.com
 * @author David Gassner (original)
 *
 * Reference: Chapter 2. Manage Multithreading in Android
 *            "Android App Development: RESTful Web Services" with David Gassner
 */
public class MainActivity extends Activity implements LoaderManager.LoaderCallbacks<String> {
    //TODO: run the app twice: once with true, and once with false.
    private static boolean IS_INIT_LOADER    = false;
    private static int     MY_TASK_LOADER_ID = 0;

    private TextView output;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        output = (TextView) findViewById(R.id.output);
    }

    public void runClickHandler(View view) {
        if ( IS_INIT_LOADER ) {
            getLoaderManager().initLoader(MY_TASK_LOADER_ID, null, this).forceLoad();
        } else {
            getLoaderManager().restartLoader(MY_TASK_LOADER_ID, null, this).forceLoad();
        }
    }

    public void clearClickHandler(View view) {
        output.setText("");
    }

    /**
     * Instantiate and return a new Loader for the given ID.
     *
     * @param id   The ID whose loader is to be created.
     * @param args Any arguments supplied by the caller.
     * @return Return a new Loader instance that is ready to start loading.
     */
    @Override
    public Loader<String> onCreateLoader(int id, Bundle args) {
        output.append("creating loader\n");
        return new MyTaskLoader(this);
    }

    /**
     * Called when a previously created loader has finished its load.
     *
     * @param loader The Loader that has finished.
     * @param data   The data generated by the Loader.
     */

    @Override
    public void onLoadFinished(Loader<String> loader, String data) {
        output.append("loader finished, returned: " + data + "\n");
    }

    /**
     * Called when a previously created loader is being reset, and thus
     * making its data unavailable.  The application should at this point
     * remove any references it has to the Loader's data.
     *
     * @param loader The Loader that is being reset.
     */
    @Override
    public void onLoaderReset(Loader<String> loader) {
        // NO-OP
    }

    private static class MyTaskLoader extends AsyncTaskLoader<String> {

        public MyTaskLoader(Context context) {
            super(context);
        }

        @Override
        public String loadInBackground() {

            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            return "from the loader";
        }

        @Override
        public void deliverResult(String data) {
            data += ", delivered";
            super.deliverResult(data);
        }
    }   // end of class MyTaskLoader

}   // end of class MainActivity
